// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// guestbook
model Post {
    id          String @id @default(cuid())
    authorId    String
    author      User @relation(fields: [authorId], references: [id])
    content     String 
    createdAt   DateTime @default(now())

    @@index([authorId]) 
}

// chess
model ChessGame {
    id          String @id @default(cuid())

    playerId    String
    player      User @relation(name: "chessGamesOwned", fields: [playerId], references: [id])

    playerWhite Boolean

    opponentId  String?
    opponent    User? @relation(name: "chessGamesJoined", fields: [opponentId], references: [id])

    public      Boolean @default(true)
    password    String?

    board       Json // json string with board information

    whiteTurn   Boolean @default(true)

    finished    Boolean @default(false)
    winnerWhite Boolean?

    @@index([playerId])
    @@index([opponentId])
}

// next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // guestbook
    posts         Post[]

    // games
    chessGamesOwned ChessGame[] @relation(name: "chessGamesOwned")
    chessGamesJoined ChessGame[] @relation(name: "chessGamesJoined")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
